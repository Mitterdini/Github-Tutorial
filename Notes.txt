This file is to keep track of important pages and useful notes.

    LP3THW - Learn Python 3 The Hard Way
    KLR    - Kali Linux Revealed
    VP     - Violent Python
================================================================================
Bookmarks:                  page number given by PDF not Book.
    LP3THW (P.242)
    KLR    (P.55)
    VP     (P.)
================================================================================

Python
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Notes

    *Use >pydoc< in Linux terminal to search for help with Python
      -search "open", "file", "os", and "sys" for other info
    *Bash Cheat Sheet: https://learncodethehardway.org/unix/bash_cheat_sheet.pdf
    *Reference Manual: https://www.gnu.org/software/bash/manual/bashref/html
    *When using .encode() or .decode()
        ->Remember !DBES!  --> Decode Bytes Encode Strings
        ->Have bytes; Need strings; ==> Decode Bytes
        ->Have strings; Need bytes; ==> Encode Strings
    *When using range()
        ->range(0,3) => 0,1,2
        ->Use it like range(start, up to but not include)
    *Every IF statement should have an ELSE
        ->If the else should never run because it doesn't make sense, then you
          must use a die function in the else that prints out an error message
          and dies. This will help you find many errors.
        ->Never nest IF statements more than two deep
    *Use WHILE loops only to loop forever       -> only in Python
    *Use FOR loops for all other looping
    *DO NOT USE DEBUGGERS
    *Don't code massive files of code before running them
        ->Code a little, run a little, fix a little
    *When you read Python code, watch out for variables that are set new values
        later in a script
    *Use flow charts to help map out "blueprints" for a script
    *When creating a file that you would like to import later, remember that
        it executes the file when importing to the desired file. (I think)
        for example, if there is a print() function in the imported file, it
        will print the line. same for input() etc.
        That being said, **ALWAYS REMEMBER** to try and keep the importing files
        to functions, classes, etc.
    *Object type comparisons should always use isinstance() instead of comparing
        types directly
    *Use ''.startswith() and ''.endswith() instead of string slicing to check
        for prefixes or suffixes
    *Use https://docs.python.org/3/distutils/setupscript.html to learn more
        about creating my own modules
    *Test files must be in the >tests/< directory and must have have an
        extension >_tests.py< for it to be picked up by the >nosetests< command
    *Make a test file for each module you make. Each module must have >test_<
        in leading the function name. for example =>  >def test_example():<

--------------------------------------------------------------------------------
________________________________
    Code lay-out: Yes's and No's|
________________________________|_______________________________________________
__YES__:

# Aligned with opening delimiter.
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

# More indentation included to distinguish this from the rest.
def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)

# Hanging indents should add a level.
foo = long_function_name(
    var_one, var_two,
    var_three, var_four)

__NO__:

# Arguments on first line forbidden when not using vertical alignment.
foo = long_function_name(var_one, var_two,
    var_three, var_four)

# Further indentation required as indentation is not distinguishable.
def long_function_name(
    var_one, var_two, var_three,
    var_four):
    print(var_one)

The 4-space rule is optional for continuation lines.

Optional:

# Hanging indents *may* be indented to other than 4 spaces.
foo = long_function_name(
  var_one, var_two,
  var_three, var_four)

__Yes__: import os
     import sys

__No__:  import sys, os

__Yes__:

FILES = [
    'setup.cfg',
    'tox.ini',
    ]
initialize(FILES,
           error=True,
           )

__No__:

FILES = ['setup.cfg', 'tox.ini',]
initialize(FILES, error=True,)

__Yes__:

def f(x): return 2*x

__No__:

f = lambda x: 2*x

________________________________________________________________________________

--------------------------------------------------------------------------------
Pages

    LP3THW (P.65)       Escape Sequences table and '\' uses
    LP3THW (P.292)      Terminal commands and definitions
    LP3THW (P.162-165)  Useful Term Tables
    LP3THW (P.186-7)    Useful Object-Oriented Terms
    LP3THW (P.293-4)    Useful Bash Commands

================================================================================

Kali Linux
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Notes

________________________________________________________________________________
--------------------------------------------------------------------------------

Pages

================================================================================

Violent Python
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Notes

________________________________________________________________________________
--------------------------------------------------------------------------------

Pages

================================================================================

Miscellaneous

    *https://wiki.archlinux.org/index.php/File_permissions_and_attributes
        -> for >ls -Al< to learn what attributes you can use
    *To sort by time in terminal use >ls -tr< or >ls -t<
